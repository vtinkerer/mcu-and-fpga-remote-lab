// package uart

// import (
// 	"bufio"
// 	"fmt"
// 	"io"
// 	"log"
// 	"strings"
// 	"sync"

// 	"go.bug.st/serial"
// )

// var logger = log.New(log.Writer(), "uart: ", log.LstdFlags)

// type UART struct {
// 	isOpen 		bool
// 	done        chan struct{}
// 	port        serial.Port

// 	ReadChannel chan string
// 	mu          sync.Mutex
// }
// func openSerialPort() (serial.Port, error) {
// 	    // Create new UART but with our existing ReadChannel
// 		mode := &serial.Mode{
// 			BaudRate: 115200,
// 		}
	
// 		ports, err := serial.GetPortsList()
// 		if err != nil {
// 			return nil, fmt.Errorf("failed to list ports: %w", err)
// 		}
	
// 		if len(ports) == 0 {
// 			return nil, fmt.Errorf("no serial ports found")
// 		}
	
// 		port, err := serial.Open(ports[0], mode)
// 		if err != nil {
// 			return nil, fmt.Errorf("failed to open port %s: %w", ports[0], err)
// 		}

// 		return port, nil
// }

// func NewUART() (*UART, error) {
// 	port, err := openSerialPort()
// 	if err != nil {
// 		return nil, err
// 	}

// 	uart := &UART{
// 		port:        port,
// 		ReadChannel: make(chan string, 100),
// 		done:        make(chan struct{}),
// 		isOpen: 	 true,
// 	}

// 	logger.Printf("new uart read channel: %p", uart.ReadChannel)

// 	go uart.readLoop()

// 	return uart, nil
// }

// func (u *UART) Recreate() error {
//     u.mu.Lock()
//     defer u.mu.Unlock()

//     if err := u.closeUnlocked(); err != nil {
//         return fmt.Errorf("failed to close old UART: %w", err)
//     }

// 	port, err := openSerialPort()
// 	if err != nil {
// 		return fmt.Errorf("failed to open serial port for recreation: %w", err) 
// 	}

//     u.done = make(chan struct{})
//     u.port = port
//     u.isOpen = true

//     go u.readLoop()

//     return nil
// }


// func (u *UART) readLoop() {
// 	reader := bufio.NewReader(u.port)
// 	for {
// 		logger.Printf("readLoop tick")
// 		select {
// 			case <-u.done:
// 				logger.Printf("Stopping read loop")
// 				return
// 			default:
// 				line, err := reader.ReadString('\n')
// 				if err != nil {
// 					if err != io.EOF {
// 						logger.Printf("Error reading from UART: %v", err)
// 					}
// 					return
// 				}
// 				u.ReadChannel <- strings.TrimSuffix(line, "\n")
// 		}
// 	}
// }

// func (u *UART) Write(data []byte) error {
// 	u.mu.Lock()
// 	defer u.mu.Unlock()

// 	n, err := u.port.Write(data)
// 	if err != nil {
// 		return fmt.Errorf("failed to write to UART: %w", err)
// 	}
// 	logger.Printf("Wrote %d bytes: %s\n", n, data)
// 	return nil
// }

// func (u *UART) closeUnlocked() error {
// 	if !u.isOpen {
// 		return nil
// 	}
// 	u.isOpen = false

// 	close(u.done)
//     return u.port.Close()
// }

// func (u *UART) Close() error {
// 	u.mu.Lock()
// 	defer u.mu.Unlock()

// 	return u.closeUnlocked()
// }


